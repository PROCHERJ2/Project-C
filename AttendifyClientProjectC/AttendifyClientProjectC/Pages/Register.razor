@page "/register"   

@inject Services.AuthenticationService AuthenticationService
@inject Services.EmailService EmailService


<h3>Register Page</h3>

<p>Please fill in the information below to create a new account:</p>

<EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="field">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="registrationModel.Name" disabled="@isAccountCreated" class="@(!isNameValid ? "input-invalid" : "")" @onblur="ValidateName" />
        @if (!isNameValid)
        {
            <span class="text-danger">Name is required.</span>
        }
    </div>

    <div class="field">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registrationModel.Email" disabled="@isAccountCreated" class="@(!isEmailValid ? "input-invalid" : "")" @onblur="ValidateEmail" />
        @if (!isEmailValid)
        {
            <span class="text-danger">Please enter a valid email address.</span>
        }
    </div>

    <div class="field">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="registrationModel.Password" disabled="@isAccountCreated" type="password" class="@(!isPasswordValid ? "input-invalid" : "")" @onblur="ValidatePassword" />
        @if (!isPasswordValid)
        {
            <span class="text-danger">Password must be at least 6 characters.</span>
        }
    </div>

    <div class="field">
        <label for="verifyPassword">Verify Password:</label>
        <InputText id="verifyPassword" @bind-Value="registrationModel.VerifyPassword" disabled="@isAccountCreated" type="password" class="@(!isVerifyPasswordValid ? "input-invalid" : "")" @onblur="ValidateVerifyPassword" />
        @if (!isVerifyPasswordValid)
        {
            <span class="text-danger">Passwords do not match.</span>
        }
    </div>

    <div class="field">
        <label for="role">Role:</label>
        <InputSelect id="role" @bind-Value="registrationModel.Role" disabled="@isAccountCreated">
            <option value="Student">Student</option>
            <option value="Teacher">Teacher</option>
        </InputSelect>
    </div>

    @if (!isAccountCreated)
    {
        <button type="submit" class="btn btn-primary">Create Account</button>
    }
</EditForm>

@if (isAccountCreated)
{
    <EditForm Model="@verificationModel">
        <p>A verification code has been sent to your email! Please enter the code below:</p>

        <div class="field">
            <label for="verificationCode">Verification Code:</label>
            <InputText id="verificationCode" @bind-Value="verificationModel.VerificationCode" />
        </div>

        <button @onclick="ConfirmAccount" class="btn btn-success">Confirm</button>
        <button @onclick="CancelAccountCreation" class="btn btn-danger">Cancel</button>
    </EditForm>
}

@*this part is without email sending*@
@* 
<EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="field">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="registrationModel.Name" disabled="@isAccountCreated" class="@(!isNameValid ? "input-invalid" : "")" @onblur="ValidateName" />
        @if (!isNameValid)
        {
            <span class="text-danger">Name is required.</span>
        }
    </div>

    <div class="field">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registrationModel.Email" disabled="@isAccountCreated" class="@(!isEmailValid ? "input-invalid" : "")" @onblur="ValidateEmail" />
        @if (!isEmailValid)
        {
            <span class="text-danger">Please enter a valid email address.</span>
        }
    </div>

    <div class="field">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="registrationModel.Password" disabled="@isAccountCreated" type="password" class="@(!isPasswordValid ? "input-invalid" : "")" @onblur="ValidatePassword" />
        @if (!isPasswordValid)
        {
            <span class="text-danger">Password must be at least 6 characters.</span>
        }
    </div>

    <div class="field">
        <label for="verifyPassword">Verify Password:</label>
        <InputText id="verifyPassword" @bind-Value="registrationModel.VerifyPassword" disabled="@isAccountCreated" type="password" class="@(!isVerifyPasswordValid ? "input-invalid" : "")" @onblur="ValidateVerifyPassword" />
        @if (!isVerifyPasswordValid)
        {
            <span class="text-danger">Passwords do not match.</span>
        }
    </div>

    <div class="field">
        <label for="role">Role:</label>
        <InputSelect id="role" @bind-Value="registrationModel.Role" disabled="@isAccountCreated">
            <option value="Student">Student</option>
            <option value="Teacher">Teacher</option>
        </InputSelect>
    </div>

    @if (!isAccountCreated)
    {
        <button type="submit" class="btn btn-primary">Create Account</button>
    }
</EditForm>

@if (isAccountCreated)
{
    <EditForm Model="@verificationModel">
        <p>A verification code has been sent to your email! Please enter the code below:</p>

        <div class="field">
            <label for="verificationCode">Verification Code:</label>
            <InputText id="verificationCode" @bind-Value="verificationModel.VerificationCode" />
        </div>

        <button @onclick="ConfirmAccount" class="btn btn-success">Confirm</button>
        <button @onclick="CancelAccountCreation" class="btn btn-danger">Cancel</button>
    </EditForm>
} *@

@* <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="field">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="registrationModel.Name" class="@(!isNameValid ? "input-invalid" : "")" @onblur="ValidateName" />
        @if (!isNameValid)
        {
            <span class="text-danger">Name is required.</span>
        }
    </div>

    <div class="field">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="registrationModel.Email" class="@(!isEmailValid ? "input-invalid" : "")" @onblur="ValidateEmail" />
        @if (!isEmailValid)
        {
            <span class="text-danger">Please enter a valid email address.</span>
        }
    </div>

    <div class="field">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="registrationModel.Password" type="password" class="@(!isPasswordValid ? "input-invalid" : "")" @onblur="ValidatePassword" />
        @if (!isPasswordValid)
        {
            <span class="text-danger">Password must be at least 6 characters.</span>
        }
    </div>

    <div class="field">
        <label for="verifyPassword">Verify Password:</label>
        <InputText id="verifyPassword" @bind-Value="registrationModel.VerifyPassword" type="password" class="@(!isVerifyPasswordValid ? "input-invalid" : "")" @onblur="ValidateVerifyPassword" />
        @if (!isVerifyPasswordValid)
        {
            <span class="text-danger">Passwords do not match.</span>
        }
    </div>

    <div class="field">
        <label for="role">Role:</label>
        <InputSelect id="role" @bind-Value="registrationModel.Role">
            <option value="Student">Student</option>
            <option value="Teacher">Teacher</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Create Account</button>
</EditForm> *@

@code {
    private AttendifySharedProjectC.Models.RegistrationModel registrationModel = new AttendifySharedProjectC.Models.RegistrationModel();
    private AttendifySharedProjectC.Models.EmailVerificationCodeModel verificationModel = new AttendifySharedProjectC.Models.EmailVerificationCodeModel();
    private bool isNameValid = true;
    private bool isEmailValid = true;
    private bool isPasswordValid = true;
    private bool isVerifyPasswordValid = true;

    private bool isAccountCreated = false;
    private string verificationCode = string.Empty;

    private bool bypassEmailVerification = true; // temporarily, so that i can implement the other login stuff without having to worry about smtp

    private void ValidateName()
    {
        isNameValid = !string.IsNullOrWhiteSpace(registrationModel.Name);
    }

    private void ValidateEmail()
    {
        var emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        isEmailValid = !string.IsNullOrWhiteSpace(registrationModel.Email) &&
                       System.Text.RegularExpressions.Regex.IsMatch(registrationModel.Email, emailPattern);
    }

    private void ValidatePassword()
    {
        isPasswordValid = !string.IsNullOrWhiteSpace(registrationModel.Password) &&
                          registrationModel.Password.Length >= 6;
    }

    private void ValidateVerifyPassword()
    {
        isVerifyPasswordValid = registrationModel.Password == registrationModel.VerifyPassword;
    }

    private async Task HandleValidSubmit()
    {
        if (isNameValid && isEmailValid && isPasswordValid && isVerifyPasswordValid)
        {
            isAccountCreated = true;

            var generatedToken = await AuthenticationService.GenerateVerificationTokenAsync();

            if (!bypassEmailVerification)                       //TEMP, to disable email ver code, remove if email works
            {
                await EmailService.SendVerificationEmailAsync(registrationModel.Email, generatedToken);
            }
        }
    }

    private async Task ConfirmAccount()
    {
        if (bypassEmailVerification)                            //TEMP, to disable email ver code, remove if email works
        {
            Console.WriteLine("Account created!");
            await AuthenticationService.CreateUserAsync(registrationModel);
        }
        else
        {
            var result = await AuthenticationService.VerifyTokenAsync(verificationModel.VerificationCode);

            if (result == "Account created!")
            {
                Console.WriteLine("Account created!");
            }
            else
            {
                Console.WriteLine("NOPE");
            }
        }
        // var result = await AuthenticationService.VerifyTokenAsync(verificationModel.VerificationCode);

        // if (result == "Account created!")
        // {
        //     Console.WriteLine("Account created!");
        // }
        // else
        // {
        //     Console.WriteLine("NOPE");
        // }
    }


    // private void HandleValidSubmit()
    // {
    //     if (isNameValid && isEmailValid && isPasswordValid && isVerifyPasswordValid)
    //     {
    //         isAccountCreated = true;
    //     }
    // }

    // private void ConfirmAccount()
    // {
    //     // Code to confirm the account will go here in the future
    //     Console.WriteLine("Account confirmed.");
    // }

    private void CancelAccountCreation()
    {
        // Revert back to the original form state without clearing the fields
        isAccountCreated = false;
    }

    // private void HandleValidSubmit()
    // {
    //     // For now, this won't do anything. You can add functionality later.
    //     Console.WriteLine("Form submitted.");
    // }

    // public class RegistrationModel
    // {
    //     public string Name { get; set; }
    //     public string Email { get; set; }
    //     public string Password { get; set; }
    //     public string VerifyPassword { get; set; }
    //     public string Role { get; set; } = "Student"; // Default to "Student"
    // }
}
<style>
    .input-invalid {
    border-color: red;
}
.text-danger {
    color: red;
}
</style>
