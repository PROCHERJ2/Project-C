@inject NavigationManager Navigation
@inject Services.AuthenticationService AuthService
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AttendifyClientProjectC</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
        <div class="nav-item px-3">
            @* <button @onclick="LogoutAsync">Logout</button>
            <NavLink href="login">Login</NavLink> *@
            <AuthorizeView>
                <Authorized>
                    <button @onclick="LogoutAsync">Logout</button>
                </Authorized>
                <NotAuthorized>
                    <NavLink href="login">Login</NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task LogoutAsync()
    {
        await AuthService.LogoutAsync();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        customAuthStateProvider.NotifyAuthenticationStateChanged();
        Navigation.NavigateTo("/", true);
    }
}
